@using System.IO
@inject IStringLocalizer<Resources> localizer
@inherits ConnectionComponentBase

<div class="d-flex flex-row-reverse">
    <div class="btn-group mb-3">
        <button class="btn btn-sm btn-primary" @onclick="() => StartPrint(selectedFile)" disabled="@(!CanStartPrint)">
            <i class="bi bi-printer"></i> @localizer[Resources.CalibrationPage_Start]
        </button>
        <button class="btn btn-sm btn-secondary" @onclick="RefreshFiles">
            <i class="bi bi-arrow-clockwise"></i> @localizer[Resources.Files_Refresh]
        </button>
    </div>
</div>

<div class="table-responsive" style="max-height: 65vh;">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>@localizer[Resources.Files_Name]</th>
                <th>@localizer[Resources.Files_DateModified]</th>
                <th>@localizer[Resources.Files_Size]</th>
            </tr>
        </thead>
        <tbody>
            @if (_isLoading)
            {
                <tr>
                    <td colspan="5" class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </td>
                </tr>
            }
            else
            {
                @foreach (var item in _files)
                {
                    <tr class="@GetRowClass(item)" @onclick="() => SelectFile(item)">
                        <td>@item.FullPath</td>
                        <td>@item.ModifiedDate?.ToString("g")</td>
                        <td>@FormatSize(item.Size)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<FileEntry> _files = new();
    private bool _isLoading;
    private FileEntry? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await RefreshFiles();
    }

    private async Task RefreshFiles()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
// _files = await ServiceFactory.Current.GetFilesAsync();
            // Sample data initialization
            _files = new List<FileEntry>
            {
                new FileEntry
                {
                    FullPath = "/gcodes/Calibration Cube.gcode",
                    Size = 245_760,
                    ModifiedDate = DateTime.Now.AddDays(-2)
                },
                new FileEntry
                {
                    FullPath = "/gcodes/Vase_Mode.gcode",
                    Size = 1_048_576,
                    ModifiedDate = DateTime.Now.AddHours(-3)
                },
                new FileEntry
                {
                    FullPath = "/gcodes/Bed_Level.gcode",
                    Size = 86_016,
                    ModifiedDate = DateTime.Now.AddHours(-1)
                },
                new FileEntry
                {
                    FullPath = "/gcodes/Robot.gcode",
                    Size = 2_097_152,
                    ModifiedDate = DateTime.Now.AddDays(-7)
                }
            };
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string FormatSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private void SelectFile(FileEntry file)
    {
        selectedFile = file;
    }

    private bool CanStartPrint => selectedFile != null && selectedFile.Size > 0;

    private string GetRowClass(FileEntry file)
    {
        return selectedFile == file ? "table-active" : string.Empty;
    }

    private async Task StartPrint(FileEntry? file)
    {
        if (file == null || ServiceFactory.Current == null) return;

        var command = ServiceFactory.Current switch
        {
            MoonrakerApiService => $"PRINT_START FILENAME={file.FullPath}",
            PrusaLinkApiService => $"/api/v1/files{file.FullPath}",
            BaseSerialService => $"M23 {file.FullPath}\nM24",
            _ => null
        };

        if (command != null)
        {
            await ServiceFactory.Current.WriteDataAsync(command);
        }
    }
}