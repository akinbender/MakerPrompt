@inherits ConnectionComponentBase

<div class="row">
    <div class="col-lg-6 col-md-12">
        <div class="card">
            <h4 class="card-header">@Localizer[Resources.ControlPanel_Position]</h4>
            <div class="card-body">
                <div class="input-group mb-2">
                    <button class="btn btn-outline-secondary" type="button"
                            title="@Localizer[Resources.ControlPanel_MotorsOff]"
                            disabled="@(!IsConnected)">
                        <i class="bi bi-stop-btn-fill"></i>
                    </button>
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">X: @_state.Position.X.ToString("F2")</span>
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">Y: @_state.Position.Y.ToString("F2")</span>
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">Z: @_state.Position.Z.ToString("F2")</span>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text">XY:</span>
                    <input type="text" class="form-control" @bind="xySpeed"
                           title="@Localizer[Resources.ControlPanel_Set_XYSpeed]"
                           disabled="@(!IsConnected)">
                    <span class="input-group-text">Z:</span>
                    <input type="text" class="form-control" @bind="zSpeed"
                           title="@Localizer[Resources.ControlPanel_Set_ZSpeed]"
                           disabled="@(!IsConnected)">
                    <span class="input-group-text">mm/min</span>
                </div>
                <div class="d-flex justify-content-center" disabled="@(!IsConnected)">
                    <div class="d-flex flex-column">
                        <div class="d-flex flex-row">
                            <div class="input-group justify-content-center">
                                <button type="button" class="btn btn-secondary" style="border-bottom-left-radius: 0;" title="@Localizer[Resources.ControlPanel_HomeAll]" @onclick="async () => await PrinterServiceFactory.Current?.Home()" disabled="@(!IsConnected)"><i class="bi bi-houses"></i></button>
                                <button type="button" class="btn btn-outline-secondary @(ActiveTab == AxisTab.X ? "active" : string.Empty)" @onclick="() => SetAxis(AxisTab.X)">X</button>
                                <button type="button" class="btn btn-outline-secondary @(ActiveTab == AxisTab.Y ? "active" : string.Empty)" @onclick="() => SetAxis(AxisTab.Y)">Y</button>
                                <button type="button" class="btn btn-outline-secondary @(ActiveTab == AxisTab.Z ? "active" : string.Empty)" @onclick="() => SetAxis(AxisTab.Z)">Z</button>
                                <button type="button" class="btn btn-secondary" style="border-bottom-right-radius: 0;" title="@Localizer[Resources.ControlPanel_HomeSelected]" @onclick="async () => await HomeSelectedAxis()" disabled="@(!IsConnected)"><i class=" bi bi-house"></i></button>
                            </div>
                        </div>
                        <div class="input-group mb-2" role="group" aria-label="relative-move">
                            @foreach (var length in moveLenghts)
                            {
                                <button type="button" class="btn btn-outline-secondary" @onclick="async () => await MoveSelectedAxis(length)" disabled="@(!IsConnected)">@(isInverse ? $"-{length}" : $" {length}")</button>
                            }
                            <div class="input-group-text">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="switchReverse" checked="@(isInverse)" @onchange="MotionReversed">
                                    <label class="form-check-label" for="switchReverse">@Localizer[Resources.ControlPanel_Reverse]</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-12">
        <div class="card mb-3">
            <h4 class="card-header">@Localizer[Resources.ControlPanel_Heating]</h4>
            <div class="card-body">
                <div class="input-group mb-2">
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">C: @_state.HotendTemp.ToString("F1")</span>
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Target]">T: @_state.HotendTarget.ToString("F1")</span>
                    <input type="number" min="0" max="300" class="form-control" @bind="hotendTarget" @bind:after="async () => await PrinterServiceFactory.Current?.SetHotendTemp(hotendTarget)" disabled="@(!IsConnected)">
                    <span class="input-group-text">°C</span>
                    <button class="btn btn-outline-secondary" type="button" title="@Localizer[Resources.ControlPanel_SetHotendTemp]" @onclick="async () => await PrinterServiceFactory.Current?.SetHotendTemp(hotendTarget)" disabled="@(!IsConnected)">@Localizer[Resources.ControlPanel_Set]</button>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">C: @_state.BedTemp.ToString("F1")</span>
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Target]">T: @_state.BedTarget.ToString("F1")</span>
                    <input type="number" min="0" max="120" class="form-control" @bind="bedTarget" @bind:after="async () => await PrinterServiceFactory.Current?.SetBedTemp(bedTarget)" disabled="@(!IsConnected)">
                    <span class="input-group-text">°C</span>
                    <button class="btn btn-outline-secondary" type="button" title="@Localizer[Resources.ControlPanel_SetBedTemp]" @onclick="async () => await PrinterServiceFactory.Current?.SetBedTemp(bedTarget)" disabled="@(!IsConnected)">@Localizer[Resources.ControlPanel_Set]</button>
                </div>
                <div class="input-group">
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">C: @_state.FanSpeed.ToString()</span>
                    <span class="input-group-text">@Localizer[Resources.ControlPanel_FanSpeed]:</span>
                    <input type="text" min="0" max="100" class="form-control" @bind="printSpeed" disabled="@(!IsConnected)">
                    <span class="input-group-text">%</span>
                    <button class="btn btn-outline-secondary" type="button" title="@Localizer[Resources.ControlPanel_Set_FanSpeed]"
                            @onclick="async () => await PrinterServiceFactory.Current?.SetFanSpeed(printSpeed)" disabled="@(!IsConnected)">
                        @Localizer[Resources.ControlPanel_Set]
                    </button>
                </div>
            </div>
        </div>

        <div class="card mb-3">
            <h4 class="card-header">@Localizer[Resources.ControlPanel_Extrude]</h4>
            <div class="card-body">
                <div class="input-group mb-2">
                    <span class="input-group-text">@Localizer[Resources.ControlPanel_Length]</span>
                    <input type="text" class="form-control" @bind="extrudeLength" disabled="@(!IsConnected)">
                    <span class="input-group-text">mm</span>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text">@Localizer[Resources.ControlPanel_Speed]</span>
                    <input type="text" class="form-control" @bind="extrudeSpeed" disabled="@(!IsConnected)">
                    <span class="input-group-text">mm/min</span>
                </div>
                <div class="d-flex align-items-end">
                    <div class="btn-group ms-auto" role="group">
                        <button type="button" class="btn btn-primary" @onclick="async () => await PrinterServiceFactory.Current?.RelativeMove(extrudeSpeed, 0, 0, 0, extrudeLength)" disabled="@(!IsConnected)">@Localizer[Resources.ControlPanel_Extrude]</button>
                        <button type="button" class="btn btn-primary" @onclick="async () => await PrinterServiceFactory.Current?.RelativeMove(extrudeSpeed, 0, 0, 0, -extrudeLength)" disabled="@(!IsConnected)">@Localizer[Resources.ControlPanel_Reverse]</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <h4 class="card-header">@Localizer[Resources.ControlPanel_Status]</h4>
            <div class="card-body">
                <div class="mb-2">
                    <label>@Localizer[Resources.GCodeCategory_SdCard]:</label>
                    <span>
                        @(_state.SDCard.Printing ? $"{_state.SDCard.Progress:F1}%" :
                                                _state.SDCard.Present ? Localizer[Resources.ControlPanel_SdCard_Ready] : Localizer[Resources.ControlPanel_SdCard_NotPresent])
                    </span>
                </div>
                <div class="input-group mb-2">
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">C: @_state.FeedRate.ToString()</span>
                    <span class="input-group-text">@Localizer[Resources.ControlPanel_PrintSpeed]:</span>
                    <input type="text" class="form-control" @bind="printSpeed" @bind:after="async () => await PrinterServiceFactory.Current?.SetPrintSpeed(printSpeed)" disabled="@(!IsConnected)">
                    <span class="input-group-text">%</span>
                    <button class="btn btn-outline-secondary" type="button" disabled>@Localizer[Resources.ControlPanel_Set]</button>
                </div>
                <div class="input-group">
                    <span class="input-group-text" title="@Localizer[Resources.ControlPanel_Current]">C: @_state.FlowRate.ToString()</span>
                    <span class="input-group-text">@Localizer[Resources.ControlPanel_PrintFlow]:</span>
                    <input type="text" class="form-control" @bind="printFlow" @bind:after="async () => await PrinterServiceFactory.Current?.SetPrintSpeed(printFlow)" disabled="@(!IsConnected)">
                    <span class="input-group-text">%</span>
                    <button class="btn btn-outline-secondary" type="button" disabled>@Localizer[Resources.ControlPanel_Set]</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PrinterTelemetry _state = new();
    private int hotendTarget = 0;
    private int bedTarget = 0;
    private int fanSpeed = 0;
    private int extrudeLength = 5;
    private int extrudeSpeed = 100;
    private int xySpeed = 1000;
    private int zSpeed = 100;
    private int printSpeed = 100;
    private int printFlow = 100;


    private bool isInverse;
    private int[] moveLenghts = { 1, 10, 100, 500 };
    private AxisTab ActiveTab = AxisTab.Y;
    private enum AxisTab { X, Y, Z }

    private void MotionReversed(ChangeEventArgs e)
    {
        // get the checkbox state
        isInverse = (bool)e.Value;
    }

    private void SetAxis(AxisTab tab)
    {
        ActiveTab = tab;
    }

    private async Task HomeSelectedAxis()
    {
        switch (ActiveTab)
        {
            case AxisTab.X:
                await PrinterServiceFactory.Current?.Home(true,false, false);
                break;
            case AxisTab.Y:
                await PrinterServiceFactory.Current?.Home(false, true, false);
                break;
            case AxisTab.Z:
                await PrinterServiceFactory.Current?.Home(false, false, true);
                break;
            default:
                return;
        }
    }

    private async Task MoveSelectedAxis(int length)
    {
        switch (ActiveTab)
        {
            case AxisTab.X:
                await PrinterServiceFactory.Current?.RelativeMove(xySpeed, length, 0, 0);
                break;
            case AxisTab.Y:
                await PrinterServiceFactory.Current?.RelativeMove(xySpeed, 0, length, 0);
                break;
            case AxisTab.Z:
                await PrinterServiceFactory.Current?.RelativeMove(zSpeed, 0, 0, length);
                break;
            default:
                return;
        }
    }
}