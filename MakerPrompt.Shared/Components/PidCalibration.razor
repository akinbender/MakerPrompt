@using System.ComponentModel
@inject IStringLocalizer<Resources> localizer
@inherits ConnectionComponentBase

<div class="calibration-section">
    <div class="form-group mb-2">
        <label>@localizer[Resources.GCodeDescription_S_TargetTemp]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Temperature" />
    </div>

    <div class="form-group mb-2">
        <label>@localizer[Resources.GCodeDescription_C_Cycle]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" />
    </div>

    <div class="form-group mb-2">
        <label>@localizer[Resources.CalibrationPage_HeaterIndex]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" />
        <small>Bed = -1, Hotend = 0</small>
    </div>

    <button class="btn btn-primary" @onclick="RunPidTuning">
        <i class="fas fa-cog"></i> @localizer[Resources.CalibrationPage_Start]
    </button>

    @if (!string.IsNullOrEmpty(calibrationResult))
    {
        <div class="result-box">
            <h4>@localizer[Resources.CalibrationPage_Result]:</h4>
            <pre>@calibrationResult</pre>
        </div>
    }
</div>

@code{
    private CalibrationParameters Calibration { get; set; } = new();
    private int HeaterIndex { get; set; } = 0;
    private string calibrationResult = string.Empty;

    private async Task RunPidTuning()
    {
        if (PrinterServiceFactory.Current == null) return;
        var command = GCodeCommands.PidAutotune
                        .SetParameterValue(GCodeParameters.CalibrationCycle.Label, Calibration.Cycles.ToString())
                        .SetParameterValue(GCodeParameters.TargetTemp.Label, Calibration.Temperature.ToString())
                        .SetParameterValue(GCodeParameters.PositionE.Label, HeaterIndex.ToString())
                    .ToString();
        await PrinterServiceFactory.Current.WriteDataAsync(command);
        StateService.Telemetry.PropertyChanged += HandlePidResult;
    }

    private void HandlePidResult(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(PrinterTelemetry.LastResponse))
        {
            var response = StateService.Telemetry.LastResponse;
            if (response.Contains("Kp") || response.Contains("PID"))
            {
                calibrationResult += response + Environment.NewLine;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override void OnInitialized()
    {
        StateService.Telemetry.PropertyChanged += HandlePidResult;
    }

    public void Dispose()
    {
        StateService.Telemetry.PropertyChanged -= HandlePidResult;
    }
}