@inherits ConnectionComponentBase

<div class="calibration-section">
    <div class="form-group mb-2">
        <label>@Localizer[Resources.GCodeDescription_S_TargetTemp]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Temperature" disabled="@(!IsConnected)" 
               title="@(IsConnected? Localizer[Resources.GCodeDescription_S_TargetTemp] : Localizer[Resources.PrinterStatus_Disconnected])" />
    </div>

    <div class="form-group mb-2">
        <label>@Localizer[Resources.GCodeDescription_C_Cycle]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" disabled="@(!IsConnected)"
               title="@(IsConnected? Localizer[Resources.GCodeDescription_C_Cycle] : Localizer[Resources.PrinterStatus_Disconnected])" />
    </div>

    <div class="form-group mb-2">
        <label>@Localizer[Resources.CalibrationPage_HeaterIndex]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" disabled="@(!IsConnected)"
               title="@(IsConnected? Localizer[Resources.CalibrationPage_HeaterIndex] : Localizer[Resources.PrinterStatus_Disconnected])" />
        <small>Bed = -1, Hotend = 0</small>
    </div>

    <button class="btn btn-primary" @onclick="RunPidTuning" disabled="@(!IsConnected)">
        <i class="fas fa-cog"></i> @Localizer[Resources.CalibrationPage_Start]
    </button>

    @if (!string.IsNullOrEmpty(calibrationResult))
    {
        <div class="result-box">
            <h4>@Localizer[Resources.CalibrationPage_Result]:</h4>
            <pre>@calibrationResult</pre>
        </div>
    }
</div>

@code{
    private CalibrationParameters Calibration { get; set; } = new();
    private int HeaterIndex { get; set; } = 0;
    private string calibrationResult = string.Empty;

    private async Task RunPidTuning()
    {
        if (PrinterServiceFactory.Current == null) return;
        var command = GCodeCommands.PidAutotune
                        .SetParameterValue(GCodeParameters.CalibrationCycle.Label, Calibration.Cycles.ToString())
                        .SetParameterValue(GCodeParameters.TargetTemp.Label, Calibration.Temperature.ToString())
                        .SetParameterValue(GCodeParameters.PositionE.Label, HeaterIndex.ToString())
                    .ToString();
        await PrinterServiceFactory.Current.WriteDataAsync(command);
        //StateService.Telemetry.PropertyChanged += HandlePidResult;
    }

    protected override void HandleTelemetryUpdated(object? sender, PrinterTelemetry printerTelemetry)
    {
        // printerTelemetry
        // if (e.PropertyName == nameof(PrinterTelemetry.LastResponse))
        // {
        //     var response = printerTelemety.LastResponse;
        //     if (response.Contains("Kp") || response.Contains("PID"))
        //     {
        //         calibrationResult += response + Environment.NewLine;
        //         InvokeAsync(StateHasChanged);
        //     }
        // }
    }
}