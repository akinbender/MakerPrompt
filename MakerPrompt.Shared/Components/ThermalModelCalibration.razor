@inherits ConnectionComponentBase

<div class="calibration-section">
    <div class="form-group mb-2">
        <label>@Localizer[Resources.GCodeDescription_S_TargetTemp]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Temperature" disabled="@(!IsConnected)" />
    </div>

    <div class="form-group mb-2">
        <label>@Localizer[Resources.GCodeDescription_C_Cycle]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" disabled="@(!IsConnected)" />
    </div>

    <button class="btn btn-primary" @onclick="RunThermalModelCalibration" disabled="@(!IsConnected)">
        <i class="fas fa-fire"></i> @Localizer[Resources.CalibrationPage_Start]
    </button>
</div>

@code {
    private CalibrationParameters Calibration { get; set; } = new();
    private string calibrationResult = "";

    private async Task RunThermalModelCalibration()
    {
        if (PrinterServiceFactory.Current == null) return;
        var command = GCodeCommands.ThermalModelCalibration
                .SetParameterValue(GCodeParameters.CalibrationCycle.Label, Calibration.Cycles.ToString())
                .SetParameterValue(GCodeParameters.TargetTemp.Label, Calibration.Temperature.ToString())
                .ToString();
        await PrinterServiceFactory.Current.WriteDataAsync(command);

    }

    private void HandleThermalModelResult(object? sender, PropertyChangedEventArgs e)
    {
        //TODO fix
        if (e.PropertyName == nameof(PrinterTelemetry.LastResponse))
        {

            // var response = StateService.Telemetry.LastResponse;
            // if (response.Contains("Kp") || response.Contains("PID"))
            // {
            //     calibrationResult += response + Environment.NewLine;
            //     InvokeAsync(StateHasChanged);
            // }
        }
    }
}
