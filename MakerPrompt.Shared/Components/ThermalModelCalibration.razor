@using System.ComponentModel
@inject PrinterCommunicationServiceFactory PrinterServiceFactory
@inject PrinterStateService StateService
@inject IStringLocalizer<Resources> localizer

<div class="calibration-section">
    <div class="form-group mb-2">
        <label>@localizer[Resources.GCodeDescription_S_TargetTemp]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Temperature" />
    </div>

    <div class="form-group mb-2">
        <label>@localizer[Resources.GCodeDescription_C_Cycle]:</label>
        <input type="number" class="form-control" @bind="@Calibration.Cycles" />
    </div>

    <button class="btn btn-primary" @onclick="RunThermalCalibration">
        <i class="fas fa-fire"></i> @localizer[Resources.CalibrationPage_Start]
    </button>
</div>

@code {
    private CalibrationParameters Calibration { get; set; } = new();
    private string calibrationResult = "";

    private async Task RunThermalCalibration()
    {
        if (PrinterServiceFactory.Current == null) return;
        var command = GCodeCommands.ThermalModelCalibration
                .SetParameterValue(GCodeParameters.CalibrationCycle.Label, Calibration.Cycles.ToString())
                .SetParameterValue(GCodeParameters.TargetTemp.Label, Calibration.Temperature.ToString())
                .ToString();
        await PrinterServiceFactory.Current.WriteDataAsync(command);

    }

    private void HandleThermalModelResult(object? sender, PropertyChangedEventArgs e)
    {
        //TODO fix
        if (e.PropertyName == nameof(PrinterTelemetry.LastResponse))
        {

            // var response = StateService.Telemetry.LastResponse;
            // if (response.Contains("Kp") || response.Contains("PID"))
            // {
            //     calibrationResult += response + Environment.NewLine;
            //     InvokeAsync(StateHasChanged);
            // }
        }
    }

    protected override void OnInitialized()
    {
        StateService.Telemetry.PropertyChanged += HandleThermalModelResult;
    }

    public void Dispose()
    {
        StateService.Telemetry.PropertyChanged -= HandleThermalModelResult;
    }
}
